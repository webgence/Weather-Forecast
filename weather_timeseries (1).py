# -*- coding: utf-8 -*-
"""Weather_TimeSeries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10gYAVFRzOUKCEJwAdwfl2iJ2HaAHEYSP

# **Gathering Data/Obtaining Data**
"""

from google.colab import drive
drive.mount('/content/drive')


import pandas as pd
import glob

# Adjust path to your actual folder in Drive
path = '/content/drive/MyDrive/WeatherData/*.csv'

csv_files = glob.glob(path)

dfs = {}
for file in csv_files:
    filename = file.split("/")[-1]
    dfs[filename] = pd.read_csv(file)

# Example: Print names of files imported
print(dfs.keys())

dfs['wind_direction.csv']

dfs['humidity.csv']

dfs['pressure.csv']

dfs['weather_description.csv']

dfs['wind_speed.csv']

dfs['temperature.csv']

"""# **Data Preprocessing**"""

#Removing NAN data from dataset
print(dfs['wind_direction.csv'].dropna())
print(dfs['humidity.csv'].dropna())
print(dfs['pressure.csv'].dropna())
print(dfs['weather_description.csv'].dropna())
print(dfs['wind_speed.csv'].dropna())
print(dfs['temperature.csv'].dropna())

"""# **Time Series Analysis**

Time series data refers to any information that is collected over a interval of time. When we analyze the time series data, it tells us insights such as trends, seasonal patterns, and forecasts into future events.


For example, we can use seasonal trends in stock prices, to know when is the best time to buy or sell a specific stock at a given time

When performing time series data, we need to first check stationarity and autocorrelation.

Stationary is a way to measure if data has structural pattersn like seasonal trends.

Autocorrelation refers when future values in a time series linearly depend on past values

We need to check for both stationary and autocorelation because they're assumptions that are made by many widely used methods in time series analysis.

The autoregressive integrated moving average (ARIMA) method for forecasting time series assumes stationarity. While linear regression for time series forcasting assumes that the data has no autocorrelation
"""

import matplotlib.pyplot as plt
import seaborn as sns

df = dfs['wind_direction.csv']
df['datetime'] = pd.to_datetime(df['datetime'])

df_resampled = df.set_index('datetime').resample('D').mean()

# Reset index for plotting
df_resampled = df_resampled.reset_index()

# Plot for a full year — for example, 2012
year_data = df_resampled[(df_resampled['datetime'] >= '2017-01-01') &
                         (df_resampled['datetime'] < '2018-01-01')]

plt.figure(figsize=(18, 6))
sns.lineplot(data=year_data, x='datetime', y='Seattle')  # Change city name if needed
plt.title("Daily Average Wind Direction in Seattle (2017)")
plt.xlabel("Date")
plt.ylabel("Wind Direction (degrees)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""In meteorology, wind direction is always reported as the direction from which the wind is blowing, measured in degrees clockwise from true north.


*   0 degrees: North

*   90 degrees: East

*   180 degrees: South

*   270 degrees: West



The average wind driection seems to be around 100-150, this means that the wind is blowing from southeast and southwest direction in seattle for most of the year.

The reason due to this is because Seattle has prevailing wind driections from the south and this is particular common in fall and winter. Our model also seems ot support this because the wind direction(degrees) would fluctuating from approximate 90 to 200 duirng the fall and winter months.


Seattle has also low pressure systems moving through the area that often brings winds from south or south west as air circulate around them.

"""

df1 = dfs['humidity.csv']
df1['datetime'] = pd.to_datetime(df1['datetime'])

df_resampled1 = df1.set_index('datetime').resample('D').mean().reset_index()

year_data1 = df_resampled1[(df_resampled1['datetime'] >= '2017-01-01') &
                           (df_resampled1['datetime'] < '2018-01-01')]

plt.figure(figsize=(18, 6))
sns.lineplot(data=year_data1, x='datetime', y='Seattle')  # Replace 'Seattle' with your city/column if different
plt.title("Daily Average Humidity in Seattle (2017)")
plt.xlabel("Date")
plt.ylabel("Humidity (%)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""The humidity is significant as it can impact weather by affecting cloud formations, precipitation, and how we perceive temperature.

High humidity means that theres more water capor in the air, which can increase the likeihood of clouds and precipitation. As an result it makes warmer weather feel hotter and colder weather feel colder.

The model shows that the average humidity in Seattle during the 2017 year was approximately 76.33994510978043.



*   55% or less: Dry and comfortable.

*   55-65%: Becoming "sticky" with muggy evenings.


*   65% or more: Lots of moisture in the air, becoming oppressive.


*   20-60%: Generally considered acceptable and comfortable for indoor environments.


*   Less than 20% (winter): Can be uncomfortable and lead to dry skin and eyes.


*   Greater than 60% (summer): Can be uncomfortable and lead to mold growth.


*   100% Relative Humidity: The air is saturated, and the temperature is the dew point.



Most of Seattle's humidity in 2017 ranged between 50% and 90%, with an average of 76%. This indicates that Seattle experiences high humidity conditions for much of the year, which can contribute to frequent cloud cover, light precipitation, and a persistent feeling of dampness in the air. This also means that when its warmer, the temperature would feel slightly more warmer. When the temperature is colder, the temperature would feel slightly more colder.










"""

df2 = dfs['pressure.csv']
df2['datetime'] = pd.to_datetime(df2['datetime'])

df_resampled2 = df2.set_index('datetime').resample('D').mean().reset_index()

year_data2 = df_resampled2[(df_resampled2['datetime'] >= '2017-01-01') &
                           (df_resampled2['datetime'] < '2018-01-01')]

plt.figure(figsize=(18, 6))
sns.lineplot(data=year_data2, x='datetime', y='Seattle')  # Replace 'Seattle' with your city/column if different
plt.title("Daily Average Pressure in Seattle (2017)")
plt.xlabel("Date")
plt.ylabel("Pressure")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

mean_pressure = year_data2['Seattle'].mean()
mean_pressure

"""Atmospheric pressure is usedful predictor of weather conditions because higher pressure is linked to clear, calm weather, while lower pressure is linked to cloudy, stormly/windy conditions.

High pressure areas indicate descending air, with trends to inhibit cloud formation and precipitation. This is due to sinking air warms and dries as it descends, making it diffcult for water vapor to condense and form clouds.

Low pressure areas are characterized by rising air, which allows clouds formation and preciptation. As the air rises, it cools and the water vapor within it condenses which leads to the formation of clouds and potentially rain or snow.


High pressure (~1020–1050 hPa) → Fair weather, clear skies

Low pressure (~980–1000 hPa) → Clouds, precipitation, storms


Most of Seattle's atmospheric pressure is in the 1000 - 1030 hPa range, with an average of 1016.3638972055887 hPa. This is not low enough to consistently indicate stormy conditions, the region does frequently experience pressure fluctuations that can bring clouds and prepitation(which is constant with Seattle's overcast and rainy weather)


"""

df3 = dfs['wind_speed.csv']
df3['datetime'] = pd.to_datetime(df3['datetime'])

df_resampled3 = df3.set_index('datetime').resample('D').mean().reset_index()

year_data3 = df_resampled3[(df_resampled3['datetime'] >= '2017-01-01') &
                           (df_resampled3['datetime'] < '2018-01-01')]

plt.figure(figsize=(18, 6))
sns.lineplot(data=year_data2, x='datetime', y='Seattle')  # Replace 'Seattle' with your city/column if different
plt.title("Daily Average Wind Speed in Seattle (2017)")
plt.xlabel("Date")
plt.ylabel("Speed")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

mean_wind_speed = year_data3['Seattle'].mean()
mean_wind_speed

"""Wind speed is a useful predictor of weather conditions because it directly influences how air masses move, interact, and change over time.

Higher wind speed indicates that weather fronts, storms, or pressure systems is approaching.

Lower wind speed indicates that there is stable weather, buildup of fog, pollutants, or heat.


Wind moves air masses, bringing warm or cold air into a region. As an result, this can affect temperature change.

Wind transports moisture from oceans, lakes, or humid areas inland. As an result, this can affect trigger rain.

Wind speed can affect pollution spread because less winds will lead to pollutants to build up and high winds will lead to disperation of pollutants.


High wind speeds in the upper atmosphere can be an early warning for: Thunderstorms, Tornadoes, Cyclones or hurricanes


Seattle has low wind speeds throughout the year, averaging 0-10mph. The majority of wind comes from the South; in the Summer and Fall, wind may blow from the NW. Light breezes may occur throughout the year from any direction.

The average wind speed is approxmiately 2.4357534930139724mph




"""

df4 = dfs['temperature.csv']
df4['datetime'] = pd.to_datetime(df4['datetime'])


# Resample to daily average
df_resampled4 = df4.set_index('datetime').resample('D').mean().reset_index()

year_data4 = df_resampled4[(df_resampled4['datetime'] >= '2017-01-01') &
                           (df_resampled4['datetime'] < '2018-01-01')]
plt.figure(figsize=(18, 6))
sns.lineplot(data=year_data4, x='datetime', y='Seattle')
plt.title("Daily Average Temperature in Seattle (2017)")
plt.xlabel("Date")
plt.ylabel("Temperature (Kelvins)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

mean_temp = year_data4['Seattle'].mean()
mean_temp

"""Temperature is a useful predictor of weather conditions because it influences how air masses move, interact, and change over time.

Lower temperatures:

The colder Air Is Denser
→ Cold air sinks and creates high-pressure systems, often associated with clear skies and calm, dry weather.

Precipitation Type Changes
→ Low temperatures can turn rain into snow, sleet, or freezing rain.

Frost and Ice Formation
→ Especially at night, temperatures below freezing can cause frost, ice on roads, or even fog under certain conditions.

Reduced Moisture in the Air
→ Cold air holds less water vapor, so humidity levels drop, making the air feel dry.


High Temperatures:
Warmer Air Rises
→ Warm air creates low-pressure systems, which often lead to cloud formation and stormy weather.

More Evaporation
→ Heat increases evaporation from water bodies and soil, leading to higher humidity, which fuels rain or thunderstorms.

Extreme Heat Events
→ Prolonged high temperatures can cause heatwaves, leading to drought, wildfires, or health risks.

Instability and Severe Weather
→ When warm surface air meets cooler upper air, it creates instability, often resulting in thunderstorms, tornadoes, or hurricanes (especially in tropical regions).

Seattle has an temperature that ranges from 28 F to 72 F throughout the year, with an average of 52.68153209847323 F.

# **Stationary Test For Temperature Data in Seattle**
"""

from statsmodels.tsa.stattools import adfuller


ts = year_data4.set_index('datetime')['Seattle']
result = adfuller(ts.dropna())
print("ADF Statistic:", result[0])
print("p-value:", result[1])

"""# **ARIMA Temperature Data in Seattle**"""

from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(ts, order=(1,1,1))
model_fit = model.fit()
print(model_fit.summary())

forecast = model_fit.forecast(steps=30)

# Create future dates
future_dates = pd.date_range(start=ts.index[-1] + pd.Timedelta(days=1), periods=30)

# Plot
plt.figure(figsize=(14,5))
plt.plot(ts, label='Observed')
plt.plot(future_dates, forecast, label='Forecast', color='orange')
plt.title("30-Day Temperature Forecast (Seattle)")
plt.xlabel("Date")
plt.ylabel("Temperature")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Prophet Temperature Data in Seattle**"""

from prophet import Prophet

# Prepare the data for Prophet
df_prophet = ts.reset_index().rename(columns={'datetime': 'ds', 'Seattle': 'y'})

# Initialize and fit the model
m = Prophet()
m.fit(df_prophet)

future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)

m.plot(forecast)
plt.title("30-Day Temperature Forecast (Seattle) with Prophet")
plt.tight_layout()
plt.show()

"""# **Exponential Smoothing Temperature Data in Seattle**"""

from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Fit the Holt-Winters model (Exponential Smoothing)
ets_model = ExponentialSmoothing(ts, trend='add', seasonal='add', seasonal_periods=12)
ets_fit = ets_model.fit()

# Forecast the next 30 days
ets_forecast = ets_fit.forecast(steps=30)

# Plotting the forecast
plt.figure(figsize=(14, 5))
plt.plot(ts, label='Observed')
plt.plot(future_dates, ets_forecast, label='ETS Forecast', color='orange')
plt.title("30-Day Temperature Forecast (Seattle) with Exponential Smoothing")
plt.xlabel("Date")
plt.ylabel("Wind Speed")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Stationary Test For Wind Speed Data in Seattle**"""

from statsmodels.tsa.stattools import adfuller


# Set up time series for ARIMA
ts_wind = year_data3.set_index('datetime')['Seattle']
ts_wind.index.freq = 'D'  # Set frequency explicitly

"""# **ARIMA Wind Speed Data in Seattle**"""

from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(ts_wind, order=(1, 1, 1))
model_fit = model.fit()
print(model_fit.summary())

forecast_wind = model_fit.forecast(steps=30)

# Create future dates
future_dates_wind = pd.date_range(start=ts_wind.index[-1] + pd.Timedelta(days=1), periods=30)

# Plot forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_wind, label='Observed')
plt.plot(future_dates_wind, forecast_wind, label='Forecast (ARIMA)', color='orange')
plt.title("30-Day Wind Speed Forecast (Seattle) with ARIMA")
plt.xlabel("Date")
plt.ylabel("Wind Speed (m/s)")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Prophet Wind Speed Data in Seattle**"""

from prophet import Prophet

# Prepare the data for Prophet
df_prophet = ts_wind.reset_index().rename(columns={'datetime': 'ds', 'Seattle': 'y'})

# Initialize and fit the model
m = Prophet()
m.fit(df_prophet)

future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)

m.plot(forecast)
plt.title("30-Day Wind Speed Forecast (Seattle) with Prophet")
plt.tight_layout()
plt.show()

"""# **Exponential Smoothing Wind Speed Data in Seattle**"""

from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Fit the Holt-Winters model (Exponential Smoothing)
ets_model = ExponentialSmoothing(ts_wind, trend='add', seasonal='add', seasonal_periods=12)
ets_fit = ets_model.fit()

# Forecast the next 30 days
ets_forecast = ets_fit.forecast(steps=30)

# Plotting the forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_wind, label='Observed')
plt.plot(future_dates, ets_forecast, label='ETS Forecast', color='orange')
plt.title("30-Day Wind Speed Forecast (Seattle) with Exponential Smoothing")
plt.xlabel("Date")
plt.ylabel("Wind Speed")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Stationary Test For Pressure Data in Seattle**"""

from statsmodels.tsa.stattools import adfuller


# Set up time series for ARIMA
ts_pressure = year_data2.set_index('datetime')['Seattle']
ts_pressure.index.freq = 'D'  # Set frequency explicitly

"""# **ARIMA Pressure Data in Seattle**"""

from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(ts_pressure, order=(1, 1, 1))
model_fit = model.fit()
print(model_fit.summary())

forecast_pressure = model_fit.forecast(steps=30)

# Create future dates
future_dates_pressure = pd.date_range(start=ts_pressure.index[-1] + pd.Timedelta(days=1), periods=30)

# Plot forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_pressure, label='Observed')
plt.plot(future_dates_pressure, forecast_pressure, label='Forecast (ARIMA)', color='orange')
plt.title("30-Day Pressure Forecast (Seattle) with ARIMA")
plt.xlabel("Date")
plt.ylabel("Pressure")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Prophet Pressure Data in Seattle**"""

from prophet import Prophet

# Prepare the data for Prophet
df_prophet = ts_pressure.reset_index().rename(columns={'datetime': 'ds', 'Seattle': 'y'})

# Initialize and fit the model
m = Prophet()
m.fit(df_prophet)

future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)

m.plot(forecast)
plt.title("30-Day Pressure Forecast (Seattle) with Prophet")
plt.tight_layout()
plt.show()

"""# **Exponential Smoothing Pressure Data in Seattle**"""

from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Fit the Holt-Winters model (Exponential Smoothing)
ets_model = ExponentialSmoothing(ts_pressure, trend='add', seasonal='add', seasonal_periods=12)
ets_fit = ets_model.fit()

# Forecast the next 30 days
ets_forecast = ets_fit.forecast(steps=30)

# Plotting the forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_pressure, label='Observed')
plt.plot(future_dates, ets_forecast, label='ETS Forecast', color='orange')
plt.title("30-Day Pressure Forecast (Seattle) with Exponential Smoothing")
plt.xlabel("Date")
plt.ylabel("Pressure")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Stationary Test For Humidity Data in Seattle**"""

from statsmodels.tsa.stattools import adfuller

# Set up time series for ARIMA
ts_humidity = year_data1.set_index('datetime')['Seattle']
ts_humidity.index.freq = 'D'  # Set frequency explicitly

"""# **ARIMA Humidity Data in Seattle**"""

from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(ts_humidity, order=(1, 1, 1))
model_fit = model.fit()
print(model_fit.summary())

forecast_humidity = model_fit.forecast(steps=30)

# Create future dates
future_dates_humidity = pd.date_range(start=ts_humidity.index[-1] + pd.Timedelta(days=1), periods=30)

# Plot forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_humidity, label='Observed')
plt.plot(future_dates_humidity, forecast_humidity, label='Forecast (ARIMA)', color='orange')
plt.title("30-Day Humidity Forecast (Seattle) with ARIMA")
plt.xlabel("Date")
plt.ylabel("Humidity")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Prophet Humidity Data in Seattle**"""

from prophet import Prophet

# Prepare the data for Prophet
df_prophet = ts_humidity.reset_index().rename(columns={'datetime': 'ds', 'Seattle': 'y'})

# Initialize and fit the model
m = Prophet()
m.fit(df_prophet)

future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)

m.plot(forecast)
plt.title("30-Day Humidity Forecast (Seattle) with Prophet")
plt.tight_layout()
plt.show()

"""# **Exponential Smoothing Humidity Data in Seattle**"""

from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Fit the Holt-Winters model (Exponential Smoothing)
ets_model = ExponentialSmoothing(ts_humidity, trend='add', seasonal='add', seasonal_periods=12)
ets_fit = ets_model.fit()

# Forecast the next 30 days
ets_forecast = ets_fit.forecast(steps=30)

# Plotting the forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_humidity, label='Observed')
plt.plot(future_dates, ets_forecast, label='ETS Forecast', color='orange')
plt.title("30-Day Humidity Forecast (Seattle) with Exponential Smoothing")
plt.xlabel("Date")
plt.ylabel("Humidity")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Stationary Test For Wind Direction Data in Seattle**"""

from statsmodels.tsa.stattools import adfuller

# Set up time series for ARIMA
ts_direction = year_data.set_index('datetime')['Seattle']
ts_direction.index.freq = 'D'  # Set frequency explicitly

"""# **ARIMA Wind Direction Data in Seattle**"""

from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(ts_direction, order=(1, 1, 1))
model_fit = model.fit()
print(model_fit.summary())

forecast_direction = model_fit.forecast(steps=30)

# Create future dates
future_dates_direction = pd.date_range(start=ts_direction.index[-1] + pd.Timedelta(days=1), periods=30)

# Plot forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_direction, label='Observed')
plt.plot(future_dates_direction, forecast_direction, label='Forecast (ARIMA)', color='orange')
plt.title("30-Day Humidity Forecast (Seattle) with ARIMA")
plt.xlabel("Date")
plt.ylabel("Wind Direction")
plt.legend()
plt.tight_layout()
plt.show()

"""# **Prophet Wind Direction Data in Seattle**"""

from prophet import Prophet

# Prepare the data for Prophet
df_prophet = ts_direction.reset_index().rename(columns={'datetime': 'ds', 'Seattle': 'y'})

# Initialize and fit the model
m = Prophet()
m.fit(df_prophet)

future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)

m.plot(forecast)
plt.title("30-Day Wind Direction Forecast (Seattle) with Prophet")
plt.tight_layout()
plt.show()

"""# **Exponential Smoothing Wind Direction Data in Seattle**"""

from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Fit the Holt-Winters model (Exponential Smoothing)
ets_model = ExponentialSmoothing(ts_direction, trend='add', seasonal='add', seasonal_periods=12)
ets_fit = ets_model.fit()

# Forecast the next 30 days
ets_forecast = ets_fit.forecast(steps=30)

# Plotting the forecast
plt.figure(figsize=(14, 5))
plt.plot(ts_direction, label='Observed')
plt.plot(future_dates, ets_forecast, label='ETS Forecast', color='orange')
plt.title("30-Day Wind Direction Forecast (Seattle) with Exponential Smoothing")
plt.xlabel("Date")
plt.ylabel("Wind Direction")
plt.legend()
plt.tight_layout()
plt.show()